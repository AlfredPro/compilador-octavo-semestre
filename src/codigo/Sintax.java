
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Thu Mar 30 19:36:15 CST 2023
//----------------------------------------------------

package codigo;

import java_cup.runtime.Symbol;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Thu Mar 30 19:36:15 CST 2023
  */
public class Sintax extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Sintax() {super();}

  /** Constructor which sets the default scanner. */
  public Sintax(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Sintax(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\101\000\002\002\004\000\002\002\011\000\002\002" +
    "\010\000\002\004\005\000\002\004\004\000\002\004\003" +
    "\000\002\004\004\000\002\004\003\000\002\004\004\000" +
    "\002\004\003\000\002\004\004\000\002\004\003\000\002" +
    "\004\004\000\002\004\003\000\002\004\005\000\002\004" +
    "\004\000\002\004\003\000\002\004\004\000\002\004\003" +
    "\000\002\003\003\000\002\005\004\000\002\005\006\000" +
    "\002\005\006\000\002\005\005\000\002\005\005\000\002" +
    "\005\006\000\002\005\004\000\002\005\006\000\002\005" +
    "\006\000\002\005\006\000\002\005\005\000\002\005\007" +
    "\000\002\005\007\000\002\005\010\000\002\005\010\000" +
    "\002\016\007\000\002\016\005\000\002\016\004\000\002" +
    "\016\005\000\002\016\007\000\002\016\007\000\002\017" +
    "\003\000\002\017\003\000\002\017\003\000\002\017\003" +
    "\000\002\017\003\000\002\017\003\000\002\020\003\000" +
    "\002\021\003\000\002\007\011\000\002\014\003\000\002" +
    "\014\005\000\002\014\005\000\002\014\005\000\002\014" +
    "\006\000\002\014\007\000\002\010\015\000\002\011\011" +
    "\000\002\012\012\000\002\013\011\000\002\015\012\000" +
    "\002\015\011\000\002\006\005\000\002\006\004\000\002" +
    "\006\004" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\227\000\006\040\005\055\004\001\002\000\004\040" +
    "\224\001\002\000\004\032\010\001\002\000\004\002\007" +
    "\001\002\000\004\002\001\001\002\000\004\033\011\001" +
    "\002\000\004\034\012\001\002\000\026\006\027\007\025" +
    "\010\020\011\031\012\032\015\034\016\013\032\014\042" +
    "\023\106\015\001\002\000\004\032\171\001\002\000\026" +
    "\006\027\007\025\010\020\011\031\012\032\015\034\016" +
    "\013\032\014\042\023\106\015\001\002\000\032\006\uffee" +
    "\007\uffee\010\uffee\011\uffee\012\uffee\014\uffee\015\uffee\016" +
    "\uffee\033\uffee\035\uffee\042\uffee\106\uffee\001\002\000\032" +
    "\006\ufffc\007\ufffc\010\ufffc\011\ufffc\012\ufffc\014\ufffc\015" +
    "\ufffc\016\ufffc\033\ufffc\035\ufffc\042\ufffc\106\ufffc\001\002" +
    "\000\032\006\ufff4\007\ufff4\010\ufff4\011\ufff4\012\ufff4\014" +
    "\ufff4\015\ufff4\016\ufff4\033\ufff4\035\ufff4\042\ufff4\106\ufff4" +
    "\001\002\000\004\042\164\001\002\000\030\006\027\007" +
    "\025\010\020\011\031\012\032\014\064\015\034\016\013" +
    "\035\163\042\023\106\015\001\002\000\032\006\ufffa\007" +
    "\ufffa\010\ufffa\011\ufffa\012\ufffa\014\ufffa\015\ufffa\016\ufffa" +
    "\033\ufffa\035\ufffa\042\ufffa\106\ufffa\001\002\000\006\017" +
    "\144\030\143\001\002\000\032\006\ufff8\007\ufff8\010\ufff8" +
    "\011\ufff8\012\ufff8\014\ufff8\015\ufff8\016\ufff8\033\ufff8\035" +
    "\ufff8\042\ufff8\106\ufff8\001\002\000\006\030\134\042\133" +
    "\001\002\000\032\006\ufff6\007\ufff6\010\ufff6\011\ufff6\012" +
    "\ufff6\014\ufff6\015\ufff6\016\ufff6\033\ufff6\035\ufff6\042\ufff6" +
    "\106\ufff6\001\002\000\006\030\123\042\124\001\002\000" +
    "\032\006\uffef\007\uffef\010\uffef\011\uffef\012\uffef\014\uffef" +
    "\015\uffef\016\uffef\033\uffef\035\uffef\042\uffef\106\uffef\001" +
    "\002\000\004\042\110\001\002\000\004\032\076\001\002" +
    "\000\032\006\ufff1\007\ufff1\010\ufff1\011\ufff1\012\ufff1\014" +
    "\ufff1\015\ufff1\016\ufff1\033\ufff1\035\ufff1\042\ufff1\106\ufff1" +
    "\001\002\000\004\032\035\001\002\000\006\031\037\042" +
    "\040\001\002\000\004\033\051\001\002\000\006\033\uffcf" +
    "\041\uffcf\001\002\000\004\026\041\001\002\000\012\005" +
    "\043\031\044\042\045\043\042\001\002\000\006\033\uffcd" +
    "\041\uffcd\001\002\000\006\005\046\042\047\001\002\000" +
    "\006\033\uffce\041\uffce\001\002\000\006\033\uffcc\041\uffcc" +
    "\001\002\000\006\033\uffcb\041\uffcb\001\002\000\004\005" +
    "\050\001\002\000\006\033\uffca\041\uffca\001\002\000\004" +
    "\034\052\001\002\000\026\006\027\007\025\010\020\011" +
    "\031\012\032\015\034\016\013\032\014\042\023\106\015" +
    "\001\002\000\030\006\027\007\025\010\020\011\031\012" +
    "\032\014\064\015\034\016\013\035\060\042\023\106\015" +
    "\001\002\000\032\006\ufffd\007\ufffd\010\ufffd\011\ufffd\012" +
    "\ufffd\014\ufffd\015\ufffd\016\ufffd\033\ufffd\035\ufffd\042\ufffd" +
    "\106\ufffd\001\002\000\032\006\ufff5\007\ufff5\010\ufff5\011" +
    "\ufff5\012\ufff5\014\ufff5\015\ufff5\016\ufff5\033\ufff5\035\ufff5" +
    "\042\ufff5\106\ufff5\001\002\000\032\006\ufffb\007\ufffb\010" +
    "\ufffb\011\ufffb\012\ufffb\014\ufffb\015\ufffb\016\ufffb\033\ufffb" +
    "\035\ufffb\042\ufffb\106\ufffb\001\002\000\032\006\ufff9\007" +
    "\ufff9\010\ufff9\011\ufff9\012\ufff9\014\ufff9\015\ufff9\016\ufff9" +
    "\033\ufff9\035\ufff9\042\ufff9\106\ufff9\001\002\000\032\006" +
    "\uffc8\007\uffc8\010\uffc8\011\uffc8\012\uffc8\014\uffc8\015\uffc8" +
    "\016\uffc8\033\uffc8\035\uffc8\042\uffc8\106\uffc8\001\002\000" +
    "\032\006\ufff7\007\ufff7\010\ufff7\011\ufff7\012\ufff7\014\ufff7" +
    "\015\ufff7\016\ufff7\033\ufff7\035\ufff7\042\ufff7\106\ufff7\001" +
    "\002\000\032\006\ufff0\007\ufff0\010\ufff0\011\ufff0\012\ufff0" +
    "\014\ufff0\015\ufff0\016\ufff0\033\ufff0\035\ufff0\042\ufff0\106" +
    "\ufff0\001\002\000\004\014\064\001\002\000\004\034\066" +
    "\001\002\000\032\006\ufff2\007\ufff2\010\ufff2\011\ufff2\012" +
    "\ufff2\014\ufff2\015\ufff2\016\ufff2\033\ufff2\035\ufff2\042\ufff2" +
    "\106\ufff2\001\002\000\026\006\027\007\025\010\020\011" +
    "\031\012\032\015\034\016\013\032\014\042\023\106\015" +
    "\001\002\000\030\006\027\007\025\010\020\011\031\012" +
    "\032\014\064\015\034\016\013\035\070\042\023\106\015" +
    "\001\002\000\004\015\071\001\002\000\004\032\072\001" +
    "\002\000\006\031\037\042\040\001\002\000\004\033\074" +
    "\001\002\000\032\006\uffc7\007\uffc7\010\uffc7\011\uffc7\012" +
    "\uffc7\014\uffc7\015\uffc7\016\uffc7\033\uffc7\035\uffc7\042\uffc7" +
    "\106\uffc7\001\002\000\032\006\ufff3\007\ufff3\010\ufff3\011" +
    "\ufff3\012\ufff3\014\ufff3\015\ufff3\016\ufff3\033\ufff3\035\ufff3" +
    "\042\ufff3\106\ufff3\001\002\000\006\031\037\042\040\001" +
    "\002\000\004\033\100\001\002\000\004\034\101\001\002" +
    "\000\026\006\027\007\025\010\020\011\031\012\032\015" +
    "\034\016\013\032\014\042\023\106\015\001\002\000\030" +
    "\006\027\007\025\010\020\011\031\012\032\014\064\015" +
    "\034\016\013\035\103\042\023\106\015\001\002\000\034" +
    "\006\uffd0\007\uffd0\010\uffd0\011\uffd0\012\uffd0\013\104\014" +
    "\uffd0\015\uffd0\016\uffd0\033\uffd0\035\uffd0\042\uffd0\106\uffd0" +
    "\001\002\000\004\034\105\001\002\000\026\006\027\007" +
    "\025\010\020\011\031\012\032\015\034\016\013\032\014" +
    "\042\023\106\015\001\002\000\030\006\027\007\025\010" +
    "\020\011\031\012\032\014\064\015\034\016\013\035\107" +
    "\042\023\106\015\001\002\000\032\006\uffc9\007\uffc9\010" +
    "\uffc9\011\uffc9\012\uffc9\014\uffc9\015\uffc9\016\uffc9\033\uffc9" +
    "\035\uffc9\042\uffc9\106\uffc9\001\002\000\006\017\112\027" +
    "\111\001\002\000\004\005\117\001\002\000\004\005\113" +
    "\001\002\000\006\005\114\042\115\001\002\000\032\006" +
    "\uffe1\007\uffe1\010\uffe1\011\uffe1\012\uffe1\014\uffe1\015\uffe1" +
    "\016\uffe1\033\uffe1\035\uffe1\042\uffe1\106\uffe1\001\002\000" +
    "\004\005\116\001\002\000\032\006\uffdf\007\uffdf\010\uffdf" +
    "\011\uffdf\012\uffdf\014\uffdf\015\uffdf\016\uffdf\033\uffdf\035" +
    "\uffdf\042\uffdf\106\uffdf\001\002\000\006\005\120\042\121" +
    "\001\002\000\032\006\uffe2\007\uffe2\010\uffe2\011\uffe2\012" +
    "\uffe2\014\uffe2\015\uffe2\016\uffe2\033\uffe2\035\uffe2\042\uffe2" +
    "\106\uffe2\001\002\000\004\005\122\001\002\000\032\006" +
    "\uffe0\007\uffe0\010\uffe0\011\uffe0\012\uffe0\014\uffe0\015\uffe0" +
    "\016\uffe0\033\uffe0\035\uffe0\042\uffe0\106\uffe0\001\002\000" +
    "\004\042\132\001\002\000\036\006\uffe7\007\uffe7\010\uffe7" +
    "\011\uffe7\012\uffe7\014\uffe7\015\uffe7\016\uffe7\017\126\027" +
    "\125\033\uffe7\035\uffe7\042\uffe7\106\uffe7\001\002\000\004" +
    "\043\131\001\002\000\006\043\130\044\127\001\002\000" +
    "\032\006\uffe6\007\uffe6\010\uffe6\011\uffe6\012\uffe6\014\uffe6" +
    "\015\uffe6\016\uffe6\033\uffe6\035\uffe6\042\uffe6\106\uffe6\001" +
    "\002\000\032\006\uffe4\007\uffe4\010\uffe4\011\uffe4\012\uffe4" +
    "\014\uffe4\015\uffe4\016\uffe4\033\uffe4\035\uffe4\042\uffe4\106" +
    "\uffe4\001\002\000\032\006\uffe5\007\uffe5\010\uffe5\011\uffe5" +
    "\012\uffe5\014\uffe5\015\uffe5\016\uffe5\033\uffe5\035\uffe5\042" +
    "\uffe5\106\uffe5\001\002\000\032\006\uffe3\007\uffe3\010\uffe3" +
    "\011\uffe3\012\uffe3\014\uffe3\015\uffe3\016\uffe3\033\uffe3\035" +
    "\uffe3\042\uffe3\106\uffe3\001\002\000\040\006\uffed\007\uffed" +
    "\010\uffed\011\uffed\012\uffed\014\uffed\015\uffed\016\uffed\017" +
    "\140\027\136\030\137\033\uffed\035\uffed\042\uffed\106\uffed" +
    "\001\002\000\004\042\135\001\002\000\032\006\uffe9\007" +
    "\uffe9\010\uffe9\011\uffe9\012\uffe9\014\uffe9\015\uffe9\016\uffe9" +
    "\033\uffe9\035\uffe9\042\uffe9\106\uffe9\001\002\000\004\043" +
    "\142\001\002\000\032\006\uffea\007\uffea\010\uffea\011\uffea" +
    "\012\uffea\014\uffea\015\uffea\016\uffea\033\uffea\035\uffea\042" +
    "\uffea\106\uffea\001\002\000\004\043\141\001\002\000\032" +
    "\006\uffeb\007\uffeb\010\uffeb\011\uffeb\012\uffeb\014\uffeb\015" +
    "\uffeb\016\uffeb\033\uffeb\035\uffeb\042\uffeb\106\uffeb\001\002" +
    "\000\032\006\uffec\007\uffec\010\uffec\011\uffec\012\uffec\014" +
    "\uffec\015\uffec\016\uffec\033\uffec\035\uffec\042\uffec\106\uffec" +
    "\001\002\000\032\006\uffdc\007\uffdc\010\uffdc\011\uffdc\012" +
    "\uffdc\014\uffdc\015\uffdc\016\uffdc\033\uffdc\035\uffdc\042\uffdc" +
    "\106\uffdc\001\002\000\010\005\146\042\147\043\145\001" +
    "\002\000\032\006\uffdb\007\uffdb\010\uffdb\011\uffdb\012\uffdb" +
    "\014\uffdb\015\uffdb\016\uffdb\033\uffdb\035\uffdb\042\uffdb\106" +
    "\uffdb\001\002\000\004\042\161\001\002\000\046\006\uffdd" +
    "\007\uffdd\010\uffdd\011\uffdd\012\uffdd\014\uffdd\015\uffdd\016" +
    "\uffdd\017\156\020\154\021\153\022\151\023\155\024\150" +
    "\033\uffdd\035\uffdd\042\uffdd\106\uffdd\001\002\000\006\042" +
    "\uffd3\043\uffd3\001\002\000\006\042\uffd5\043\uffd5\001\002" +
    "\000\006\042\160\043\157\001\002\000\006\042\uffd6\043" +
    "\uffd6\001\002\000\006\042\uffd7\043\uffd7\001\002\000\006" +
    "\042\uffd4\043\uffd4\001\002\000\006\042\uffd8\043\uffd8\001" +
    "\002\000\032\006\uffda\007\uffda\010\uffda\011\uffda\012\uffda" +
    "\014\uffda\015\uffda\016\uffda\033\uffda\035\uffda\042\uffda\106" +
    "\uffda\001\002\000\032\006\uffd9\007\uffd9\010\uffd9\011\uffd9" +
    "\012\uffd9\014\uffd9\015\uffd9\016\uffd9\033\uffd9\035\uffd9\042" +
    "\uffd9\106\uffd9\001\002\000\004\005\162\001\002\000\032" +
    "\006\uffde\007\uffde\010\uffde\011\uffde\012\uffde\014\uffde\015" +
    "\uffde\016\uffde\033\uffde\035\uffde\042\uffde\106\uffde\001\002" +
    "\000\004\002\uffff\001\002\000\004\017\165\001\002\000" +
    "\004\044\166\001\002\000\032\006\uffe8\007\uffe8\010\uffe8" +
    "\011\uffe8\012\uffe8\014\uffe8\015\uffe8\016\uffe8\033\uffe8\035" +
    "\uffe8\042\uffe8\106\uffe8\001\002\000\030\006\027\007\025" +
    "\010\020\011\031\012\032\014\064\015\034\016\013\033" +
    "\170\042\023\106\015\001\002\000\032\006\ufffe\007\ufffe" +
    "\010\ufffe\011\ufffe\012\ufffe\014\ufffe\015\ufffe\016\ufffe\033" +
    "\ufffe\035\ufffe\042\ufffe\106\ufffe\001\002\000\006\006\174" +
    "\042\173\001\002\000\004\033\220\001\002\000\004\017" +
    "\212\001\002\000\004\042\175\001\002\000\004\017\176" +
    "\001\002\000\004\043\177\001\002\000\004\041\200\001" +
    "\002\000\006\031\037\042\040\001\002\000\004\041\202" +
    "\001\002\000\006\030\204\042\205\001\002\000\004\033" +
    "\uffc5\001\002\000\004\042\211\001\002\000\006\027\206" +
    "\030\207\001\002\000\004\043\210\001\002\000\004\033" +
    "\uffc2\001\002\000\004\033\uffc3\001\002\000\004\033\uffc1" +
    "\001\002\000\004\043\213\001\002\000\004\041\214\001" +
    "\002\000\006\031\037\042\040\001\002\000\004\041\216" +
    "\001\002\000\006\030\204\042\205\001\002\000\004\033" +
    "\uffc4\001\002\000\004\034\221\001\002\000\026\006\027" +
    "\007\025\010\020\011\031\012\032\015\034\016\013\032" +
    "\014\042\023\106\015\001\002\000\030\006\027\007\025" +
    "\010\020\011\031\012\032\014\064\015\034\016\013\035" +
    "\223\042\023\106\015\001\002\000\032\006\uffc6\007\uffc6" +
    "\010\uffc6\011\uffc6\012\uffc6\014\uffc6\015\uffc6\016\uffc6\033" +
    "\uffc6\035\uffc6\042\uffc6\106\uffc6\001\002\000\004\032\225" +
    "\001\002\000\004\033\226\001\002\000\004\034\227\001" +
    "\002\000\026\006\027\007\025\010\020\011\031\012\032" +
    "\015\034\016\013\032\014\042\023\106\015\001\002\000" +
    "\030\006\027\007\025\010\020\011\031\012\032\014\064" +
    "\015\034\016\013\035\231\042\023\106\015\001\002\000" +
    "\004\002\000\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\227\000\004\002\005\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\022\003\015\004\020\005" +
    "\021\007\023\010\025\011\016\013\032\016\027\001\001" +
    "\000\002\001\001\000\022\003\015\004\166\005\021\007" +
    "\023\010\025\011\016\013\032\016\027\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\022\003\053\005\055\007\056\010\060\011\054" +
    "\012\062\013\064\016\061\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\014\035\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\022\003\015\004\052\005\021\007\023\010" +
    "\025\011\016\013\032\016\027\001\001\000\022\003\053" +
    "\005\055\007\056\010\060\011\054\012\062\013\064\016" +
    "\061\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\012\074\001\001\000\002" +
    "\001\001\000\002\001\001\000\022\003\015\004\066\005" +
    "\021\007\023\010\025\011\016\013\032\016\027\001\001" +
    "\000\022\003\053\005\055\007\056\010\060\011\054\012" +
    "\062\013\064\016\061\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\014\072\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\014\076\001\001" +
    "\000\002\001\001\000\002\001\001\000\022\003\015\004" +
    "\101\005\021\007\023\010\025\011\016\013\032\016\027" +
    "\001\001\000\022\003\053\005\055\007\056\010\060\011" +
    "\054\012\062\013\064\016\061\001\001\000\002\001\001" +
    "\000\002\001\001\000\022\003\015\004\105\005\021\007" +
    "\023\010\025\011\016\013\032\016\027\001\001\000\022" +
    "\003\053\005\055\007\056\010\060\011\054\012\062\013" +
    "\064\016\061\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\017\151\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\022\003\053\005\055\007\056\010" +
    "\060\011\054\012\062\013\064\016\061\001\001\000\002" +
    "\001\001\000\004\015\171\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\014\200\001\001\000" +
    "\002\001\001\000\004\006\202\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\014\214\001\001\000" +
    "\002\001\001\000\004\006\216\001\001\000\002\001\001" +
    "\000\002\001\001\000\022\003\015\004\221\005\021\007" +
    "\023\010\025\011\016\013\032\016\027\001\001\000\022" +
    "\003\053\005\055\007\056\010\060\011\054\012\062\013" +
    "\064\016\061\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\022\003\015\004" +
    "\227\005\021\007\023\010\025\011\016\013\032\016\027" +
    "\001\001\000\022\003\053\005\055\007\056\010\060\011" +
    "\054\012\062\013\064\016\061\001\001\000\002\001\001" +
    "" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Sintax$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Sintax$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Sintax$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    private Symbol s;

    public void syntax_error(Symbol s){
        this.s = s;
    }

    public Symbol getS(){
        return this.s;
    }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Sintax$actions {
  private final Sintax parser;

  /** Constructor */
  CUP$Sintax$actions(Sintax parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Sintax$do_action(
    int                        CUP$Sintax$act_num,
    java_cup.runtime.lr_parser CUP$Sintax$parser,
    java.util.Stack            CUP$Sintax$stack,
    int                        CUP$Sintax$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Sintax$result;

      /* select the action based on the action number */
      switch (CUP$Sintax$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // DECLARACION_FOR ::= Op_incremento Identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION_FOR",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // DECLARACION_FOR ::= Identificador Op_incremento 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION_FOR",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // DECLARACION_FOR ::= Identificador Op_atribucion Numero 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION_FOR",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // SENTENCIA_FOR ::= Identificador Igual Numero P_coma SENTENCIA_BOOLEANA P_coma DECLARACION_FOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_FOR",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // SENTENCIA_FOR ::= T_dato Identificador Igual Numero P_coma SENTENCIA_BOOLEANA P_coma DECLARACION_FOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_FOR",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // FOR ::= For Parentesis_a SENTENCIA_FOR Parentesis_c Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FOR",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // DO_WHILE ::= Do Llave_a SENTENCIA Llave_c While Parentesis_a SENTENCIA_BOOLEANA Parentesis_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DO_WHILE",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // WHILE ::= While Parentesis_a SENTENCIA_BOOLEANA Parentesis_c Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("WHILE",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // IF_ELSE ::= If Parentesis_a SENTENCIA_BOOLEANA Parentesis_c Llave_a SENTENCIA Llave_c Else Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF_ELSE",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-10)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // SENTENCIA_BOOLEANA ::= Identificador Op_relacional Comillas Identificador Comillas 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // SENTENCIA_BOOLEANA ::= Identificador Op_relacional Comillas Comillas 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // SENTENCIA_BOOLEANA ::= Identificador Op_relacional Identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // SENTENCIA_BOOLEANA ::= Identificador Op_relacional Numero 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // SENTENCIA_BOOLEANA ::= Identificador Op_relacional Op_booleano 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // SENTENCIA_BOOLEANA ::= Op_booleano 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // IF ::= If Parentesis_a SENTENCIA_BOOLEANA Parentesis_c Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // OPERADOR_LOGICO ::= Op_logico 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERADOR_LOGICO",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // OPERADOR_RELACIONAL ::= Op_relacional 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERADOR_RELACIONAL",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // OPERADOR_ARITMETICO ::= Division 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERADOR_ARITMETICO",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // OPERADOR_ARITMETICO ::= Multiplicacion 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERADOR_ARITMETICO",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // OPERADOR_ARITMETICO ::= Mod 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERADOR_ARITMETICO",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // OPERADOR_ARITMETICO ::= Resta 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERADOR_ARITMETICO",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // OPERADOR_ARITMETICO ::= Suma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERADOR_ARITMETICO",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // OPERADOR_ARITMETICO ::= Igual 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERADOR_ARITMETICO",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // ASIGNACION ::= Identificador Igual Identificador OPERADOR_ARITMETICO Identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ASIGNACION",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // ASIGNACION ::= Identificador Igual Identificador OPERADOR_ARITMETICO Numero 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ASIGNACION",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // ASIGNACION ::= Identificador Igual Numero 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ASIGNACION",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // ASIGNACION ::= Identificador Op_incremento 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ASIGNACION",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // ASIGNACION ::= Identificador Igual Identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ASIGNACION",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // ASIGNACION ::= Identificador Igual Comillas Identificador Comillas 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ASIGNACION",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // DECLARACION ::= Cadena Identificador Igual Comillas Identificador Comillas 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // DECLARACION ::= Cadena Identificador Op_atribucion Comillas Identificador Comillas 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // DECLARACION ::= Cadena Identificador Igual Comillas Comillas 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // DECLARACION ::= Cadena Identificador Op_atribucion Comillas Comillas 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // DECLARACION ::= T_dato Op_incremento Identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // DECLARACION ::= T_dato Identificador Igual Numero 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // DECLARACION ::= T_dato Identificador Op_atribucion Numero 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // DECLARACION ::= T_dato Identificador Igual NumeroDecimal 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // DECLARACION ::= T_dato Identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // DECLARACION ::= Float Identificador Igual NumeroDecimal 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // DECLARACION ::= Int Op_incremento Identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // DECLARACION ::= Int Identificador Op_incremento 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // DECLARACION ::= Int Identificador Igual Numero 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // DECLARACION ::= Int Identificador Op_atribucion Numero 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // DECLARACION ::= Int Identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // TABULAR ::= tab 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TABULAR",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // SENTENCIA ::= ASIGNACION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // SENTENCIA ::= SENTENCIA ASIGNACION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // SENTENCIA ::= FOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // SENTENCIA ::= SENTENCIA FOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // SENTENCIA ::= SENTENCIA DO_WHILE DO_WHILE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // SENTENCIA ::= WHILE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // SENTENCIA ::= SENTENCIA WHILE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // SENTENCIA ::= IF_ELSE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // SENTENCIA ::= SENTENCIA IF_ELSE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // SENTENCIA ::= IF 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // SENTENCIA ::= SENTENCIA IF 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // SENTENCIA ::= DECLARACION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // SENTENCIA ::= SENTENCIA DECLARACION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // SENTENCIA ::= TABULAR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // SENTENCIA ::= SENTENCIA TABULAR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // SENTENCIA ::= Parentesis_a SENTENCIA Parentesis_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // INICIO ::= Main Parentesis_a Parentesis_c Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= def_word Main Parentesis_a Parentesis_c Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		RESULT = start_val;
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Sintax$parser.done_parsing();
          return CUP$Sintax$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

