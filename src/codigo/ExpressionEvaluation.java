/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
import java.util.Stack;
import java.util.HashMap;
import java.lang.Math;
/**
 *
 * @author Alfredo
 */
public class ExpressionEvaluation extends javax.swing.JFrame {

    /**
     * Creates new form ExpressionEvaluation
     */
    public ExpressionEvaluation() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTextField1 = new javax.swing.JTextField();
        inputExpression = new javax.swing.JTextField();
        calculateBtn = new javax.swing.JButton();
        resultExpression = new javax.swing.JTextField();

        jTextField1.setText("jTextField1");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        calculateBtn.setText("Analizar");
        calculateBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                calculateBtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(resultExpression)
                    .addComponent(inputExpression))
                .addContainerGap())
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(273, Short.MAX_VALUE)
                .addComponent(calculateBtn)
                .addGap(258, 258, 258))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(inputExpression, javax.swing.GroupLayout.PREFERRED_SIZE, 54, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(calculateBtn)
                .addGap(18, 18, 18)
                .addComponent(resultExpression, javax.swing.GroupLayout.PREFERRED_SIZE, 66, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(308, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    public static boolean isNumeric(String strNum) {
        if (strNum == null) {
            return false;
        }
        try {
            double d = Double.parseDouble(strNum);
        } 
        catch (NumberFormatException nfe) {
            return false;
        }
        return true;
    }
    
    private void calculateBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_calculateBtnActionPerformed
        HashMap<String, Integer> prioridades;
        prioridades = new HashMap<String, Integer>();
        prioridades.put(")", 5);
        prioridades.put("^", 4);
        prioridades.put("*", 3);
        prioridades.put("/", 3);
        prioridades.put("+", 2);
        prioridades.put("-", 2);
        prioridades.put("(", 1);
        
        String inputStr = inputExpression.getText();
        String[] tokens = inputStr.split(" ");
        Stack<Double> operandos = new Stack<Double>();
        Stack<String> operadores = new Stack<String>();
        for(String s : tokens){
            System.out.println(s);
            if(isNumeric(s)){
                operandos.push(Double.parseDouble(s));
            }
            else{
                if(operadores.empty() || s.equals("(")){
                    operadores.push(s);
                }
                else{
                    if(!s.equals(")")){
                        if(prioridades.get(s) > prioridades.get(operadores.peek())){
                            operadores.push(s);
                        }
                        else{
                            double op1 = operandos.pop();
                            double op2 = operandos.pop();
                            double res = 0;
                            String oper = operadores.pop();
                            switch(oper){
                                case "^":
                                    res = Math.pow(op2, op1);
                                    break;
                                case "*":
                                    res = op2 * op1;
                                    break;
                                case "/":
                                    res = op2 / op1;
                                    break;
                                case "+":
                                    res = op2 + op1;
                                    break;
                                case "-":
                                    res = op2 - op1;
                                    break;
                                default:
                                    res = 0;
                                    break;
                            }
                            System.out.println("Res"+Double.toString(res));
                            operandos.push(res);
                            operadores.push(s);
                        }
                    }
                    else{
                        while(!operadores.peek().equals("(")){
                            double op1 = operandos.pop();
                            double op2 = operandos.pop();
                            double res = 0;
                            String oper = operadores.pop();
                            switch(oper){
                                case "^":
                                    res = Math.pow(op2, op1);
                                    break;
                                case "*":
                                    res = op2 * op1;
                                    break;
                                case "/":
                                    res = op2 / op1;
                                    break;
                                case "+":
                                    res = op2 + op1;
                                    break;
                                case "-":
                                    res = op2 - op1;
                                    break;
                                default:
                                    res = 0;
                                    break;
                            }
                            System.out.println("Res2"+Double.toString(res));
                            operandos.push(res);
                        }
                        operadores.pop();
                    }
                }
            }
        }
        while(!operadores.empty()){
            double op1 = operandos.pop();
            double op2 = operandos.pop();
            double res = 0;
            String oper = operadores.pop();
            switch(oper){
                case "^":
                    res = Math.pow(op2, op1);
                    break;
                case "*":
                    res = op2 * op1;
                    break;
                case "/":
                    res = op2 / op1;
                    break;
                case "+":
                    res = op2 + op1;
                    break;
                case "-":
                    res = op2 - op1;
                    break;
                default:
                    res = 0;
                    break;
            }
            
            System.out.println(op1);
            System.out.println(op2);
            System.out.println(oper);
            System.out.println(res);
            operandos.push(res);
        }
        resultExpression.setText(Double.toString(operandos.pop()));
    }//GEN-LAST:event_calculateBtnActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ExpressionEvaluation.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ExpressionEvaluation.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ExpressionEvaluation.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ExpressionEvaluation.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ExpressionEvaluation().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton calculateBtn;
    private javax.swing.JTextField inputExpression;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTextField resultExpression;
    // End of variables declaration//GEN-END:variables
}
